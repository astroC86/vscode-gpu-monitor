(()=>{"use strict";var e={379:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MonitorPanel=void 0;const n=o(398),r=o(94);class i{constructor(e){this.extensionUri=e,this.panel=n.window.createWebviewPanel(i.viewType,"GPU & Memory Monitor",n.ViewColumn.One,{enableScripts:!0,retainContextWhenHidden:!0,enableFindWidget:!0,enableCommandUris:!0,localResourceRoots:[n.Uri.joinPath(e,"dist")]}),this.panel.webview.html=this._getWebviewContent(this.panel.webview,e)}updateData(e){this.panel.webview.postMessage(e)}_getWebviewContent(e,t){const o=e.asWebviewUri(n.Uri.joinPath(t,"dist","webview.js")),i=(0,r.getNonce)();return`<!DOCTYPE html>\n            <html lang="en">\n            <head>\n                <meta charset="UTF-8">\n                <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource} 'unsafe-inline'; script-src 'nonce-${i}' 'unsafe-eval';">\n                <title>GPU & Memory Monitor</title>\n                <script nonce="${i}">\n                    window.onerror = function(message, source, lineno, colno, error) {\n                        console.error('Global error:', message, 'Source:', source, 'Line:', lineno, error);\n                    };\n                    window.addEventListener('unhandledrejection', function(event) {\n                        console.error('Unhandled promise rejection:', event.reason);\n                    });\n                    console.log('Webview starting...');\n                <\/script>\n            </head>\n            <body>\n                <div id="root"></div>\n                <script nonce="${i}">\n                    console.log('Loading script from:', '${o}');\n                <\/script>\n                <script nonce="${i}" src="${o}"><\/script>\n            </body>\n            </html>`}}t.MonitorPanel=i,i.viewType="gpuMonitor"},135:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.webviewLogger=t.Logger=void 0;const n=o(398);t.Logger=class{static init(){this.outputChannel=n.window.createOutputChannel("GPU Monitor")}static log(e,t="Extension"){const o=(new Date).toISOString();this.outputChannel?.appendLine(`[${o}] [${t}] ${e}`)}static error(e,t="Extension"){const o=(new Date).toISOString(),n=e instanceof Error?`${e.message}\n${e.stack}`:e;this.outputChannel?.appendLine(`[${o}] [${t}] ERROR: ${n}`)}static show(){this.outputChannel?.show()}static dispose(){this.outputChannel?.dispose()}},t.webviewLogger={log:e=>{acquireVsCodeApi().postMessage({command:"log",text:e,level:"info"})},error:e=>{const t=acquireVsCodeApi(),o=e instanceof Error?`${e.message}\n${e.stack}`:e;t.postMessage({command:"log",text:o,level:"error"})}}},94:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getNonce=void 0,t.getNonce=function(){let e="";for(let t=0;t<32;t++)e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62*Math.random()));return e}},398:e=>{e.exports=require("vscode")},896:e=>{e.exports=require("fs")},23:e=>{e.exports=require("util")}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,o),i.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.deactivate=e.activate=void 0;const t=o(398),r=o(896),i=o(379),a=o(135),s=o(23);e.activate=function(e){let o;a.Logger.init(),a.Logger.log("Extension activating");const n=new s.TextDecoder("utf-8");let c=t.commands.registerCommand("vscode-gpu-monitor.start",(async()=>{if(a.Logger.log("Start command executed"),o)return a.Logger.log("Reusing existing panel"),void o.panel.reveal(t.ViewColumn.One);async function s(e){if(!r.existsSync(e))throw new Error(`File not found: ${e}`);const o=await t.workspace.fs.readFile(t.Uri.file(e));return n.decode(o)}o=new i.MonitorPanel(e.extensionUri),o.panel.webview.onDidReceiveMessage((async e=>{switch(e.command){case"log":"error"===e.level?a.Logger.error(new Error(e.text),"Webview"):a.Logger.log(e.text,"Webview");break;case"getInitialData":a.Logger.log("getInitialData command received","Webview");try{const t=await s(e.gpuPath),n=await s(e.memoryPath);o.updateData({command:"initialData",gpu:t,memory:n,gpuPath:e.gpuPath,memoryPath:e.memoryPath})}catch(e){a.Logger.error(e,"Extension"),t.window.showErrorMessage(`Failed to read initial data: ${e.message}`)}break;case"getNewData":try{const t=await async function(e,t){if(!r.existsSync(e))throw new Error(`File not found: ${e}`);if(r.statSync(e).size<=t)return"";const o=r.createReadStream(e,{start:t,encoding:"utf8"});let n="";for await(const e of o)n+=e;return n}(e.path,e.lastPosition);o.updateData({command:"update",type:e.type,data:t,lastPosition:e.lastPosition+t.length,path:e.path})}catch(o){a.Logger.error(o,"Extension"),t.window.showErrorMessage(`Failed to read new data from ${e.path}: ${o.message}`)}break;case"error":a.Logger.error(new Error(e.text),"Webview"),t.window.showErrorMessage(`Webview error: ${e.text}`)}}),void 0,e.subscriptions),o.panel.onDidDispose((()=>{a.Logger.log("Panel disposed"),o=void 0}),null,e.subscriptions),a.Logger.show()}));e.subscriptions.push(c),e.subscriptions.push({dispose:()=>{a.Logger.log("Extension deactivating"),a.Logger.dispose()}}),a.Logger.log("Extension activated")},e.deactivate=function(){}})(),module.exports=n})();
//# sourceMappingURL=extension.js.map